// https://eslint.org/demo
{
  "plugins": [
    "react"
  ],
  "parser": "babel-eslint",
  "parserOptions": {
    "ecmaVersion": 6,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "env": {
    "browser": true,
    "node": true,
    "es6": true,
    "mocha": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended"
  ],
  "globals": {
    "React": true,
    "ReactDOM": true,
    "PropTypes": true,
    "shallow": true,
    "expect": true,
    "itRenders": true
  },
  // 0 - turn the rule off
  // 1 - turn the rule on as a warning (doesn’t affect exit code)
  // 2 - turn the rule on as an error (exit code will be 1)
  "rules": {
    // The following rules point out areas where you might have made mistakes.
    "comma-dangle": ["error", "always-multiline", {"functions": "never"}], // require or disallow trailing commas (требовать или запрещать запятые)
    "no-cond-assign": 2, // disallow assignment operators in conditional expressions (запретить операции присваивания в условных выражениях)
    "no-console": ["error", { "allow": ["info", "warn", "error"] }],
    "no-constant-condition": 2, // disallow constant expressions in conditions (запретить постоянные выражения в условиях)
    "no-control-regex": 2, // disallow control characters in regular expressions (запретить управляющие символы в регулярных выражениях)
    "no-debugger": 1, // disallow the use of debugger (запретить использование отладчика)
    "no-dupe-args": 2, // disallow duplicate arguments in functions definitions (запретить дублирование аргументов в определениях функций)
    "no-dupe-keys": 2, // disallow duplicate keys in object literals (запретить дублирование ключей в объектных литералах)
    "no-duplicate-case": 2, // disallow duplicate cases (запретить дубликаты кейсов)
    "no-empty": 2, // disallow empty statements (запретить пустые утверждения)
    "no-empty-character-class": 2, // disallow empty character classes in regular expressions (запретить пустые классы символов в регулярных выражениях)
    "no-ex-assign": 2, // disallow reassigning exceptions in catch clauses (запретить переназначение исключений в 'catch')
    "no-extra-boolean-cast": 2, // disallow unnecessary boolean casts (запретить ненужные булевские броски)
    "no-extra-parens": 1, // disallow unnecessary parentheses (запретить ненужные круглые скобки)
    "no-useless-escape": 1, // disallow unnecessary escape characters (запретить ненужные escape-символы)
    "no-extra-semi": 2, // disallow unnecessary semicolons (запретить ненужные точки с запятой)
    "no-func-assign": 2, // disallow reassigning function declarations (запретить переназначение объявлений функций)
    "no-inner-declarations": 2, // disallow function or variable declarations in nested blocks (запретить или объявлять переменные во вложенных блоках)
    "no-invalid-regexp": 2, // disallow invalid regular expression strings in RegExp constructors (запретить недопустимые строки регулярных выражений в конструкторах RegExp)
    "no-irregular-whitespace": 1, // disallow irregular whitespace outside of strings and comments (запретить нерегулярные пробелы за пределами строк и комментариев)
    "no-negated-in-lhs": 2, // disallow negating the left operand in 'in' expression (запретить отрицание левого операнда в выражении 'in')
    "no-obj-calls": 1, // disallow calling global object properties as functions (запретить вызов глобальных свойств объекта как функций)
    "no-regex-spaces": 2, // disallow multiple spaces in regular expressions (запретить несколько пробелов в регулярных выражениях)
    "no-sparse-arrays": 1, // disallow sparse arrays (запретить разреженные массивы - массивы с пустыми ячейками)
    "no-unreachable": 2, // disallow unreachable code after 'return', 'throw', 'continue' and 'break' statements (запретить недостижимый код после слов «return», «throw», «continue» и «break»)
    "use-isnan": 2, // require calls to 'isNan()' when checking for 'NaN' (требование вызова «isNan()» при проверке на «NaN»)
    "valid-jsdoc": 2, // enforce valid JSDoc comments (применять действующие комментарии JSDoc)
    "valid-typeof": 2, // enforce comparing 'typeof' expressions against valid strings (принудительное сравнение выражений 'typeof' с действительными строками)

    // These are rules designed to prevent you from making mistakes.
    // They either prescribe a better way of doing something or help you avoid footguns.
    "block-scoped-var": 0, // enforce the use of variables within the scope they are defined (принудительно использовать переменные в пределах области, в которой они определены)
    "complexity": [1, { "max": 5 }], // enforce a maximum ciclomatic complexitty allowed in a program (обеспечить максимальную цикломатическую сложность, разрешенную в программе)
    "consistent-return": 0, // require 'return' statements to either always or never specify values (требовать выражения 'return' либо всегда, либо никогда не указывать значения)
    "curly": 2, // enforce consistent brace style for all control statements (применять согласованный стиль фигурной скобки для всех контрольных операторов)
    "default-case": 1, // require 'default' cases in 'switch' statements (требование «default» в операторах «switch»)
    "dot-notation": 1, // enforce dot notation whenever possible (по возможности использовать нотацию точек)
    "eqeqeq": 2, // require the use of '===' and '!==' (требование использования '===' и '!==')
    "guard-for-in": 1, // require for-in loops to include an 'if' statement (требование, чтобы циклы for-in включали оператор if для 'hasOwnProperty')
    "no-alert": 2, // disallow the use of 'alert', 'confirm', and 'prompt' (запретить использование 'alert', 'confirm', и 'prompt')
    "no-caller": 2, // disallow the use of 'arguments.caller' or 'arguments.callee' (запретить использование 'arguments.caller' или 'arguments.callee')
    "no-div-regex": 2, // disallow division operators explicitly at the beginning of regular expressions (запретить операции деления явно в начале регулярных выражений)
    "no-else-return": 1, // disallow 'else' blocks after 'return' statements in 'if' statements (запретить «else» блоки после операторов «return» в операторах «if»)
    "no-eq-null": 2, // disallow 'null' comparisons without type-checking operators (запретить 'null' сравнения без операторов проверки типов)
    "no-eval": 2, // disallow the use of 'eval()' (запретить использование 'eval()')
    "no-extend-native": 2, // disallow extending native types (запретить наследование нативных типов)
    "no-extra-bind": 2, // disallow unnecessary calls to '.bind()' (запретить ненужные вызовы к '.bind()')
    "no-fallthrough": 2, // disallow fallthrough of 'case' statements (запретить проваливание в операторах выражения)
    "no-floating-decimal": 2, // disallow leading or trailing decimal points in numeric literals (запретить вводные или конечные десятичные точки в числовых литералах)
    "no-implied-eval": 2, // disallow use of 'eval()' - like method (запретить использование 'eval()' - как метод)
    "no-iterator": 2, // disallow the use of the '__iterator__' property (запретить использование свойства '__iterator__')
    "no-labels": 0, // disallow labeled statements (запретить маркированные выражения)
    "no-lone-blocks": 2, // disallow unnecessary nested blocks (запретить ненужные вложенные блоки)
    "no-loop-func": 1, // disallow 'function' declarations and expressions inside loop statements (запретить функции декларирования и выражения внутри операторов цикла)
    "no-multi-spaces": 2, // disallow multiple spaces (запретить несколько пробелов)
    "no-multi-str": 2, // disallow multiline strings (запретить многострочные строки)
    "no-native-reassign": 2, // disallow assignments to native objects or read-only global variables (запретить присваивания собственным объектам или глобальным переменным только для чтения)
    "no-new": 2, // disallow 'new' operators outside of assignments or comparisons (запретить 'new' операторы за пределами присвоений или сравнений)
    "no-new-func": 2, // disallow 'new' operators with the 'Function' object (запретить 'new' операторы с объектом 'Function')
    "no-new-wrappers": 2, // disallow 'new' operators with the 'String', 'Number' and Boolean objects (запретить 'new' операторы с объектами 'String', 'Number' и Boolean)
    "no-new-symbol": 2, // disallow 'new' operators with the 'Symbol' object (запретить 'new' операторы с объектом 'Symbol')
    "no-new-require": 2, // disallow 'new' operators with calls to 'require' (запретить 'new' операторы с вызовом к 'require')
    "no-new-object": 2, // disallow 'Object' constructor (запретить конструктор 'Object')
    "no-octal": 2, // disallow octal literals (запретить восьмеричные литералы)
    "no-octal-escape": 2, // disallow octal escape sequences in string literals (запретить восьмеричные escape-последовательности в строковых литералах)
    "no-param-reassign": 1, // disallow reassigning 'function' parameters (запретить переназначение параметров 'function')
    "no-process-env": 0, // disallow the use of 'process.env' (запретить использование 'process.env')
    "no-proto": 2, // disallow the use of the '__proto__' property (запретить использование свойства '__proto__')
    "no-redeclare": 2, // disallow variable redeclaration (запретить переопределение переменных)
    "no-return-assign": 2, // disallow assignment operators in 'return' statements (запретить операции присваивания операторам в выражениях 'return')
    "no-script-url": 2, // disallow 'javascript:' urls (запретить 'javascript:' urls)
    "no-self-compare": 2, // disallow comparisons where both sides are exactly the same (запретить сравнение, где обе стороны точно совпадают)
    "no-sequences": 2, // disallow comma operators (запретить запятые)
    "no-throw-literal": 2, // disallow throwing literals as exceptions (запретить бросать литералы в качестве исключений)
    "no-unused-expressions": [1, { "allowShortCircuit": true }], // disallow unused expressions (запретить неиспользуемые выражения)
    "no-void": 0, // disallow 'void' operators (запретить 'void' операторы)
    "no-warning-comments": [0, {"terms": ["todo", "fixme", "xxx"], "location": "start"}], // disallow specified warning terms in comments (отключить определенные условия предупреждения в комментариях)
    "no-with": 2, // disallow 'with' statements ( запретить 'with' выражения)
    "radix": 1, // enforce the consistent use of the radix argument when using 'parseInt()' (обеспечить последовательное использование аргумента radix при использовании 'parseInt ()')
    "vars-on-top": 2, // require 'var' declarations be placed at the top of their containing scope (требуование, чтобы объявления «var» размещались в верхней части их области)
    "yoda": ["error", "never", { "onlyEquality": true }], // require or disallow 'Yoda' conditions (требовать или запрещать условия 'Yoda')

    // These rules relate to using strict mode.
    "strict": 0, // require or disallow 'strict' mode directives (требовать или запрещать «строгие» режимы)

    // These rules have to do with variable declarations.
    "no-catch-shadow": 2, // disallow 'catch' clause parameters from shadowing variables in the outer scope (запретить параметры предложения catch из переменных затенения во внешней области)
    "no-delete-var": 2, // disallow deleting variables (запретить удаление переменных)
    "no-label-var": 2, // disallow labels that share a name with a variable (запретить маркировку, которая имеет одинаковое имя с переменной)
    "no-shadow": 1, // disallow variable declaration from shadowing variables declared in the outer scope (запретить объявление переменных из переменных затенения, объявленных во внешней области)
    "no-shadow-restricted-names": 2, // disallow identifiers from shadowing restricting names (запретить идентификаторы от теневого ограничения имен)
    "no-undef": 1, // disallow the use of undeclared variables unless mentioned in a '/*global*/' comments (запретить использование необъявленных переменных, если не указано в комментариях '/ * global * /')
    "no-global-assign": 1, // disallow assignments to native objects or read-only global variables (запретить присваивания собственным объектам или глобальным переменным только для чтения)
    "no-undef-init": 2, // disallow initializing variables to 'undefined' (запретить инициализацию переменных в 'undefined')
    "no-undefined": 1, // disallow the use of undefined as an identifier (запретить использование undefined как идентификатора)
    "no-unused-vars": 2, // disallow unused variables (запретить неиспользуемые переменные)
    "no-use-before-define": 0, // disallow the use of variables before they are defined (запретить использование переменных до их определения)

    // These rules are purely matters of style and are quite subjective.
    // "indent": [1, 4], // enforce consistent indentation (обеспечивать постоянный отступ)
    "brace-style": ["error", "1tbs"], // enforce consistent brace style for blocks (применять согласованный стиль фигурной скобки для блоков)
    "camelcase": 0, // enforce 'camelcase' naming convention (обеспечить соблюдение правил именования 'camelcase')
    "comma-spacing": [2, {"before": false, "after": true}], // enforce consistent spacing before and after commas (обеспечить согласованное расстояние до и после запятой)
    "comma-style": [2, "last"], // enforce consistent comma style (использовать последовательный стиль запятой)
    "consistent-this": [1, "_this"], // enforce consistent naming when capturing the current execution context (принудительное согласование имен при захвате текущего контекста выполнения)
    "eol-last": 0, // enforce at least one newline at the end of files (принудительно по крайней мере одна новая строка в конце файлов)
    "func-names": 0, // require or disallow named function expressions (требовать или запрещать именованные функциональные выражения)
    "func-style": 0, // enforce the consistent use of either function declarations or expressions (обеспечить последовательное использование объявлений или выражений функции)
    "key-spacing": [2, {"singleLine": {"beforeColon": false, "afterColon": true}, "multiLine": {"beforeColon": false, "afterColon": true}}], // enforce consistent spacing between keys and values in object literal properties (обеспечить согласованное расстояние между ключами и значениями в свойствах объектного литерала)
    "max-nested-callbacks": [1, 3], // enforce a maximum depth that callbacks can be nested (обеспечить максимальную глубину, чтобы обратные вызовы могли быть вложены)
    "new-cap": [2, {"newIsCap": true, "capIsNew": false}], // require constructor function names to begin with a capital letter (требование, чтобы имена функций конструктора начинались с заглавной буквы)
    "new-parens": 2, // require parentheses when invoking a constructor with no arguments (требование, чтобы при вызове конструктора без аргументов)
    "newline-after-var": 0, // require or disallow an empty line after var declarations (требовать или запрещать пустую строку после объявлений var)
    "no-array-constructor": 1, // disallow Array constructors (запретить конструкторы массива)
    "no-inline-comments": 0, // disallow inline comments after code (запретить встроенные комментарии после кода)
    "no-lonely-if": 1, // disallow if statements as the only statement in else blocks (запретить, если операторы как единственный оператор в блоках else)
    "no-mixed-spaces-and-tabs": 0, // disallow mixed spaces and tabs for indentation (запретить смешанные пробелы и вкладки для отступов)
    "no-multiple-empty-lines": [1, {"max": 1}], // disallow multiple empty lines (запретить несколько пустых строк)
    "no-nested-ternary": 1, // disallow nested ternary expressions (запретить вложенные тернарные выражения)
    "no-spaced-func": 1, // disallow space between function identifiers and their applications - deprecated (запретить пространство между идентификаторами функций и их приложениями - устарел)
    "no-ternary": 0, // disallow ternary operators (запретить тернарные операторы)
    "no-trailing-spaces": 0, // disallow trailing whitespace at the end of lines (запретить конечные пробелы в конце строк)
    "no-underscore-dangle": 0, // disallow dangling underscores in identifiers (запретить свисающие символы подчеркивания в идентификаторах)
    "one-var": [1, "never"], // enforce variables to be declared either together or separately in functions (применять переменные, которые должны быть объявлены либо совместно, либо отдельно в функциях)
    "operator-assignment": [1, "always"], // require or disallow assignment operator shorthand where possible (требовать или запрещать сокращение оператора, где это возможно)
    "padded-blocks": [1, "never"], // require or disallow padding within blocks (требовать или запрещать заполнение в блоках)
    "quote-props": [1, "as-needed"], // require quotes around object literal property names (требование кавычек вокруг имен свойств объекта объекта)
    "quotes": [1, "single", {"allowTemplateLiterals": true}], // enforce the consistent use of either backticks, double, or single quotes (обеспечить последовательное использование либо обратных, двойных, либо одинарных кавычек)
    "semi": [2, "always"], // require or disallow semicolons instead of ASI (требовать или запрещать точки с запятой вместо ASI)
    "semi-spacing": [2, {"before": false, "after": true}], // enforce consistent spacing before and after semicolons (обеспечивать согласованное расстояние до и после с запятой)
    "sort-vars": 0, // require variables within the same declaration block to be sorted (требуют, чтобы переменные в пределах одного блока объявлений были отсортированы)
    // "space-after-keywords": "off", // require a space after certain keywords (unknown)
    "keyword-spacing": [2, {"before": true, "after": true}], // enforce consistent spacing before and after keywords (обеспечить согласованное расстояние до и после ключевых слов)
    "space-before-blocks": [1, "always"], // enforce consistent spacing before blocks (обеспечить согласованное расстояние до блоков)
    "space-before-function-paren": [1, {"anonymous": "always", "named": "never"}], // enforce consistent spacing before function definition opening parenthesis (обеспечить согласованный интервал перед открытием вскрытия функции)
    "object-curly-spacing": ["error", "always"], // enforce consistent spacing inside braces (обеспечить согласованное расстояние между фигурными скобками)
    "array-bracket-spacing": [0, "always"], // enforce consistent spacing inside array brackets (обеспечить согласованное расстояние между скобками массива)
    "space-in-parens": [1, "never"], // enforce consistent spacing inside parentheses (обеспечить согласованное расстояние между круглыми скобками)
    "space-infix-ops": [2, {"int32Hint": false}], // require spacing around operators (требуется расстояние между операторами)
    "space-unary-ops": [1, {"words": true, "nonwords": false}], // enforce consistent spacing before or after unary operators (обеспечить согласованное расстояние до или после унарных операторов)
    "spaced-comment": [0, "always"], // enforce consistent spacing after the // or /* in a comment (обеспечить согласованное расстояние после // или /* в комментарии)
    "wrap-regex": 2, // require parenthesis around regex literals (требование скобок вокруг регулярных выражений)

    // These rules are only relevant to ES6 environments and are off by default.
    "no-var": 2, // require let or const instead of var (требование let или const вместо var)
    "generator-star-spacing": ["error", {"before": false, "after": true, "anonymous": "neither", "method": {"before": true, "after": true}}], // enforce consistent spacing around * operators in generator functions (обеспечить согласованное расстояние вокруг операторов * в функциях генератора)

    // The following rules are included for compatibility with JSHint and JSLint.
    // While the names of the rules may not match up with the JSHint/JSLint counterpart, the functionality is the same.
    "max-depth": [1, 4], // enforce a maximum depth that blocks can be nested (обеспечить максимальную глубину, которая может быть вложенной)
    "max-len": [1, { "code": 150, "tabWidth": 2, "ignoreUrls": true, "ignoreTrailingComments": true, "ignoreComments": true }], // enforce a maximum line length (обеспечить максимальную длину линии)
    "max-params": [1, 5], // enforce a maximum number of parameters in function definitions (обеспечить максимальное количество параметров в определениях функций)
    "max-statements": 0, // enforce a maximum number of statements allowed in function blocks (обеспечить максимальное количество утверждений, разрешенных в функциональных блоках)
    "no-bitwise": [1, { "int32Hint": true, "allow": ["~"] }], // disallow bitwise operators (запретить побитовые операторы)
    "no-plusplus": 0, // disallow the unary operators ++ and -- (запретить унарные операторы ++ и --)
    "jsx-quotes": [2, "prefer-single"], // Enforce quote style for JSX attributes (Использовать стиль цитат для атрибутов JSX)
    "arrow-spacing": [2, { "before": true, "after": true }], // enforce consistent spacing before and after the arrow in arrow functions (обеспечить согласованное расстояние до и после стрелки в стрелочках)

    // other rules:
    "accessor-pairs": 0, // enforce getter and setter pairs in objects (применять пары геттеров и сеттеров в объектах)
    "array-bracket-newline": 0, // enforce line breaks after opening and before closing array brackets (принудительно выполнять разрывы строк после открытия и перед закрытием скобок массива)
    "array-callback-return": 0, // enforce return statements in callbacks of array methods (принудительное выполнение операторов return в обратных вызовах методов массива)
    "array-element-newline": 0, // enforce line breaks after each array element (принудительно выполнять разрывы строк после каждого элемента массива)
    "arrow-body-style": 0, // require braces around arrow function bodies (требуют скобок вокруг тела функции стрелки)
    "arrow-parens": 0, // require parentheses around arrow function arguments (требовать круглые скобки вокруг аргументов функции стрелки)
    "block-spacing": 0, // enforce consistent spacing inside single-line blocks (обеспечить согласованное расстояние внутри однострочных блоков)
    "callback-return": 0, // require return statements after callbacks (Требовать операторы возврата после обратных вызовов)
    "capitalized-comments": 0, // enforce or disallow capitalization of the first letter of a comment (принудительное или запрещение заглавной буквы первого письма комментария)
    "class-methods-use-this": 0, // enforce that class methods utilize this (применять эти методы класса)
    "for-direction": 0, // enforce 'for' loop update clause moving the counter in the right direction (применять 'for' предложение обновления цикла перемещает счетчик в правильном направлении)
    "getter-return": 0, // enforce return statements in getters (принудительно использовать операторы return в getters)
    "no-await-in-loop": 0, // disallow await inside of loops (отключить ожидание внутри петель)
    "no-compare-neg-zero": 0, // disallow comparing against -0 (запретить сравнение с -0)
    "no-prototype-builtins": 0, // disallow calling some Object.prototype methods directly on objects (запретить вызов некоторых методов Object.prototype непосредственно на объекты)
    "no-template-curly-in-string": 0, // disallow template literal placeholder syntax in regular strings (запретить шаблонный литеральный синтаксис заполнителя в регулярных строках)
    "no-unexpected-multiline": 0, // disallow confusing multiline expressions (запретить запутывание многострочных выражений)
    "no-unsafe-finally": 0, // disallow control flow statements in finally blocks (отключить инструкции потока управления в блоках finally)
    "no-unsafe-negation": 0, // disallow negating the left operand of relational operators (запретить отрицание левого операнда реляционных операторов)
    "dot-location": 0, // enforce consistent newlines before and after dots (применять согласованные строки новой строки до и после точек)
    "no-case-declarations": 0, // disallow lexical declarations in case clauses (запретить лексические объявления в случаях)
    "no-empty-function": 0, // disallow empty functions (отключить пустые функции)
    "no-empty-pattern": 0, // disallow empty destructuring patterns (запретить пустые шаблоны деструкции)
    "no-extra-label": 0, // disallow unnecessary labels (запретить ненужные ярлыки)
    "no-implicit-coercion": 0, // disallow shorthand type conversions (запретить сокращенные типы конверсий)
    "no-implicit-globals": 0, // disallow var and named function declarations in the global scope (запретить объявления var и named function в глобальной области)
    "no-invalid-this": 0, // disallow this keywords outside of classes or class-like objects (запретить эти ключевые слова вне классов или классов)
    "no-magic-numbers": 0, // disallow magic numbers (запретить магические числа)
    "no-restricted-properties": 0, // disallow certain properties on certain objects (запретить определенные свойства для определенных объектов)
    "no-return-await": 0, // disallow unnecessary return await (запретить ненужное возвращение)
    "no-self-assign": 0, // disallow assignments where both sides are exactly the same (запретить присвоения, где обе стороны точно совпадают)
    "no-unmodified-loop-condition": 0, // disallow unmodified loop conditions (запретить условия немодифицированного контура)
    "no-unused-labels": 0, // disallow unused labels (запретить неиспользованные ярлыки)
    "no-useless-call": 0, // disallow unnecessary calls to .call() and .apply() (запретить ненужные вызовы .call () и .apply ())
    "no-useless-concat": 0, // disallow unnecessary concatenation of literals or template literals (запретить ненужную конкатенацию литералов или шаблонных литералов)
    "no-useless-return": 0, // disallow redundant return statements (запретить избыточные операторы возврата)
    "prefer-promise-reject-errors": 0, // require using Error objects as Promise rejection reasons (требуют использования объектов Error в качестве причин отказа от Promise)
    "require-await": 0, // disallow async functions which have no await expression (запретить асинхронные функции, которые не имеют ожидающего выражения)
//    "wrap-iife": 0, // require parentheses around immediate function invocations (требуют скобок вокруг непосредственных вызовов функций)
    "init-declarations": 0, // require or disallow initialization in var declarations (требовать или запрещать инициализацию в объявлениях var)
    "no-restricted-globals": 0, // disallow specified global variables (запретить указанные глобальные переменные)
    "global-require": 0, // require require() calls to be placed at top-level module scope (требуют require () вызовов для размещения в области модуля верхнего уровня)
    "handle-callback-err": 0, // require error handling in callbacks (требуют обработки ошибок в обратных вызовах)
    "no-buffer-constructor": 0, // disallow use of the Buffer() constructor (запретить использование конструктора Buffer ())
    "no-mixed-requires": 0, // disallow require calls to be mixed with regular var declarations (disallow требуют, чтобы вызовы смешивались с регулярными объявлениями var)
    "no-path-concat": 0, // disallow string concatenation with __dirname and __filename (отключить конкатенацию строк с помощью __dirname и __filename)
    "no-process-exit": 0, // disallow the use of process.exit() (запретить использование process.exit ())
    "no-restricted-modules": 0, // disallow specified modules when loaded by require (запретить указанные модули при загрузке по требованию)
    "no-sync": 0, // disallow synchronous methods (запретить синхронные методы)
    "computed-property-spacing": 0, // enforce consistent spacing inside computed property brackets (обеспечить согласованное расстояние внутри вычисленного свойства bracketsenforce согласованное расстояние внутри вычисленных скобок свойств)
    "func-call-spacing": 0, // require or disallow spacing between function identifiers and their invocations (требуют или запрещают интервалы между идентификаторами функций и их вызовами)
    "func-name-matching": 0, // require function names to match the name of the variable or property to which they are assigned (требуют, чтобы имена функций соответствовали имени переменной или свойства, которому они назначены)
    "function-paren-newline": 0, // enforce consistent line breaks inside function parentheses (обеспечить согласованные разрывы строк внутри круглых скобок функций)
    "id-blacklist": 0, // disallow specified identifiers (запретить указанные идентификаторы)
    "id-length": 0, // enforce minimum and maximum identifier lengths (обеспечивать минимальную и максимальную длину идентификатора)
    "id-match": 0, // require identifiers to match a specified regular expression (требуют, чтобы идентификаторы соответствовали указанному регулярному выражению)
    "implicit-arrow-linebreak": 0, // enforce the location of arrow function bodies (обеспечить местонахождение органов функции стрелки)
    "indent-legacy": 0, // enforce consistent indentation (legacy, deprecated) (обеспечивать постоянный отступ (устаревший, устаревший))
    "line-comment-position": 0, // enforce position of line comments (упорядочить позицию строк)
    "lines-between-class-members": 0, // require or disallow an empty line between class members (требовать или запрещать пустую строку между членами класса)
    "linebreak-style": 0, // enforce consistent linebreak style (применять согласованный стиль линии)
    "lines-around-comment": 0, // require empty lines around comments (требуют пустых строк вокруг комментариев)
    "lines-around-directive": 0, // require or disallow newlines around directives (требовать или запрещать новые строки вокруг директив)
    "max-lines": 0, // enforce a maximum number of lines per file (обеспечить максимальное количество строк в файле)
    "max-statements-per-line": 0, // enforce a maximum number of statements allowed per line (обеспечить максимальное количество разрешений на строку)
    "multiline-comment-style": 0, // enforce a particular style for multiline comments (применять особый стиль для многострочных комментариев)
    "multiline-ternary": 0, // enforce newlines between operands of ternary expressions (применять символы новой строки между операндами тройных выражений)
    "newline-before-return": 0, // require an empty line before return statements (потребовать пустую строку перед операциями возврата)
    "newline-per-chained-call": 0, // require a newline after each call in a method chain (требуется новая строка после каждого вызова в цепочке методов)
    "no-continue": 0, // disallow continue statements (запретить дальнейшие заявления)
    "no-mixed-operators": 0, // disallow mixed binary operators (запретить смешанные двоичные операторы)
    "no-multi-assign": 0, // disallow use of chained assignment expressions (запретить использование прикованных выражений присваивания)
    "no-negated-condition": 0, // disallow negated conditions (запретить отрицательные условия)
    "no-restricted-syntax": 0, // disallow specified syntax (запретить указанный синтаксис)
    "no-tabs": 0, // disallow tabs in file (запретить внесение вкладок в файл)
    "no-unneeded-ternary": 0, // disallow ternary operators when simpler alternatives exist (запретить тернарные операторы, когда существуют более простые альтернативы)
    "no-whitespace-before-property": 0, // disallow whitespace before properties (запретить пробелы перед свойствами)
    "nonblock-statement-body-position": 0, // enforce the location of single-line statements (обеспечить соблюдение местоположения однострочных операторов)
    "object-curly-newline": 0, // enforce consistent line breaks inside braces (обеспечить согласованные разрывы строк внутри фигурных скобок)
    "object-property-newline": 0, // enforce placing object properties on separate lines (принудительное размещение свойств объекта на отдельных строках)
    "one-var-declaration-per-line": 0, // require or disallow newlines around var declarations (требовать или запрещать новые строки вокруг объявлений var)
    "operator-linebreak": 0, // enforce consistent linebreak style for operators (применять согласованный стиль строк для операторов)
    "padding-line-between-statements": 0, // require or disallow padding lines between statements (требовать или запрещать отступы между утверждениями)
    "require-jsdoc": 0, // require JSDoc comments (требуют комментариев JSDoc)
    "semi-style": 0, // enforce location of semicolons (обеспечить расположение точек с запятой)
    "sort-keys": 0, // requires object keys to be sorted (требует сортировки объектных ключей)
    "switch-colon-spacing": 0, // enforce spacing around colons of switch statements (применять интервал между двоеточиями операторов switch)
    "template-tag-spacing": 0, // require or disallow spacing between template tags and their literals (требуют или запрещают интервалы между тегами шаблонов и их литералами)
    "unicode-bom": 0, // require or disallow Unicode byte order mark (BOM) (требуют или запрещают маркировку байтов Unicode (BOM))
    "constructor-super": 0, // require super() calls in constructors (требуют супер () вызовов в конструкторах)
    "no-class-assign": 0, // disallow reassigning class members (запретить переназначение членов класса)
    "no-confusing-arrow": 0, // disallow arrow functions where they could be confused with comparisons (запретить функции стрелок, где их можно путать со сравнением)
    "no-const-assign": 0, // disallow reassigning const variables (запретить переназначение константных переменных)
    "no-dupe-class-members": 0, // disallow duplicate class members (запретить дублирование членов класса)
//    "no-duplicate-imports": 0, // disallow duplicate module imports (запретить дублировать импорты)
//    "no-restricted-imports": 0, // disallow specified modules when loaded by import (запретить указанные модули при загрузке по импорту)
    "no-this-before-super": 0, // disallow this/super before calling super() in constructors (запретить this/super перед вызовом super () в конструкторах)
    "no-useless-computed-key": 0, // disallow unnecessary computed property keys in object literals (запретить ненужные вычисленные ключи свойств в объектных литералах)
    "no-useless-constructor": 0, // disallow unnecessary constructors (запретить ненужные конструкторы)
//    "no-useless-rename": 0, // disallow renaming import, export, and destructured assignments to the same name (запретить переименование импорта, экспорта и деструктурированных присвоений с тем же именем)
    "object-shorthand": 0, // require or disallow method and property shorthand syntax for object literals (требует или запрещает метод и свойство сокращенного синтаксиса для объектных литералов)
    "prefer-arrow-callback": 0, // require arrow functions as callbacks (требовать функции стрелок как обратные вызовы)
    "prefer-const": 0, // require const declarations for variables that are never reassigned after declared (требуют объявления const для переменных, которые никогда не переназначаются после объявления)
    "prefer-destructuring": 0, // require destructuring from arrays and/or objects (требуют деструктурирования из массивов и / или объектов)
    "prefer-numeric-literals": 0, // disallow parseInt() in favor of binary, octal, and hexadecimal literals (disallow parseInt () в пользу бинарных, восьмеричных и шестнадцатеричных литералов)
    "prefer-reflect": 0, // require Reflect methods where applicable (требуются методы отражения, где это применимо)
    "prefer-rest-params": 0, // require rest parameters instead of arguments (требуют параметров отдыха вместо аргументов)
    "prefer-spread": 0, // require spread operators instead of .apply() (требуют операторов с расширением вместо .apply ())
    "prefer-template": 0, // require template literals instead of string concatenation (требуют шаблонных литералов вместо конкатенации строк)
    "require-yield": 0, // require generator functions to contain yield (требуют, чтобы функции генератора содержали выход)
    "rest-spread-spacing": 0, // enforce spacing between rest and spread operators and their expressions (обеспечить соблюдение интервалов между операторами отдыха и распространения и их выражениями)
//    "sort-imports": 0, // enforce sorted import declarations within modules (применять сортированные декларации импорта в рамках модулей)
    "symbol-description": 0, // require symbol descriptions (требуют описания символов)
    "template-curly-spacing": 0, // require or disallow spacing around embedded expressions of template strings (требовать или запрещать интервалы между встроенными выражениями строк шаблона)
    "yield-star-spacing": 0, // require or disallow spacing around the * in yield* expressions (требуют или запрещают интервалы между выражениями * в yield *)
    "require-unicode-regexp": 0, // enforce the use of 'u' flag on RegExp (принудительно использовать флаг «u» в RegExp)
    "require-atomic-updates": 0, // disallow assignments that can lead to race conditions due to usage of 'await' or 'yield' (запретить присвоения, которые могут привести к условиям гонки из-за использования «ожидания» или «выхода»,)
    "prefer-object-spread": 0, // disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead (запретить использование Object.assign с литералом объекта в качестве первого аргумента и предпочесть использовать распространение объекта вместо)
    "no-misleading-character-class": 0, // disallow characters which are made with multiple code points in character class class syntax ()
    "no-async-promise-executor": 0, // disallow using an async function as a Promise executor (запретить использование async-функции как исполнителя Promise)
    "max-lines-per-function": 0, // enforce a maximum number of line of code in a function (обеспечить максимальное количество строк кода в функции)
    "max-classes-per-file": 0, // enforce a maximum number of classes per file (обеспечить максимальное количество классов в файле)

    // React specific linting rules for ESLint
    "react/display-name": 0, // Prevent missing displayName in a React component definition (Запретить отсутствующее имя displayName в определении компонента React)
    "react/jsx-no-undef": 2, // Disallow undeclared variables in JSX (Запретить необъявленные переменные в JSX)
    "react/jsx-sort-props": 0, // Enforce props alphabetical sorting (Принудительная передача props в алфавитном порядке)
    "react/jsx-uses-react": 2, // Prevent React to be incorrectly marked as unused (Предотвратить неправильную пометку React как неиспользуемого)
    "react/jsx-uses-vars": 2, // Prevent variables used in JSX to be incorrectly marked as unused (Запретить неверные помеченные переменные в JSX как неиспользуемые)
    "react/no-did-mount-set-state": 2, // Prevent usage of setState in componentDidMount (Запретить использование setState в компонентеDidMount)
    "react/no-did-update-set-state": 2, // Prevent usage of setState in componentDidUpdate (Запретить использование setState в компонентеDidUpdate)
    "react/no-direct-mutation-state": 2, // Prevent direct mutation of this.state (Предотвратите прямую мутацию this.state)
    "react/no-find-dom-node": 0, // Prevent usage of findDOMNode (Запретить использование findDOMNode)
    "react/no-string-refs": 2, // Prevent using string references (Запретить использование ссылок на строки)
    "react/jsx-no-target-blank": 0, // ["error", {"enforceDynamicLinks": "always"}] Prevent usage of unsafe target='_blank' (Запретить использование небезопасной цели = '_ blank')
    "react/no-multi-comp": 0, // Prevent multiple component definition per file (Предотвращение определения нескольких компонентов для каждого файла)
    "react/no-unknown-property": 2, // Prevent usage of unknown DOM property (Запретить использование неизвестного свойства DOM)
    "react/prop-types": 2, // Prevent missing props validation in a React component definition (Предотвращение отсутствия проверки реквизита в определении компонента React)
    "react/react-in-jsx-scope": 2, // Prevent missing React when using JSX (Предотвращение отсутствия ответа при использовании JSX)
    "react/self-closing-comp": 1, // Prevent extra closing tags for components without children (Предотвращение дополнительных закрывающих тегов для компонентов без детей)
    "react/no-deprecated": 2, // This rule will warn you if you try to use a deprecated method (Это правило предупредит вас, если вы попытаетесь использовать устаревший метод)
    "react/no-children-prop": 0
  }
}
